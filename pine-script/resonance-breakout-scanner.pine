// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ¬© xtoor 2025

//@version=6
indicator("Resonance.ai Breakout Scanner v12.5", overlay=true, max_bars_back=500)

// ===== INPUT PARAMETERS =====
scanMode = input.string("fast", "Scan Mode", options=["fast", "medium", "slow", "custom"])
customThreshold = input.float(1.3, "Custom Breakout Threshold (%)", minval=0.1, maxval=10.0, step=0.1) / 100
customVolumeRatio = input.float(1.3, "Custom Volume Spike Ratio", minval=1.0, maxval=5.0, step=0.1)
lookbackPeriod = input.int(10, "Lookback Candles", minval=5, maxval=50)
minVolumeDollar = input.float(2000, "Min Volume (USD/min)", minval=100, maxval=100000, step=100)

// Visual settings
breakoutCol = input.color(#00C853, "Breakout Signal Color")
potentialCol = input.color(#FF9800, "Potential Signal Color")
showVolume = input.bool(true, "Show Volume Histogram")
showSignalLabels = input.bool(true, "Show Signal Labels")

// Alert settings
enableAlerts = input.bool(true, "Enable Alerts")

// ===== MODE CONFIGURATION =====
// Set parameters based on scan mode
candleCount = scanMode == "fast" ? 10 : scanMode == "medium" ? 15 : scanMode == "slow" ? 20 : lookbackPeriod
breakoutThreshold = scanMode == "fast" ? 0.013 : scanMode == "medium" ? 0.018 : scanMode == "slow" ? 0.024 : customThreshold
volumeThreshold = scanMode == "fast" ? 1.3 : scanMode == "medium" ? 1.7 : scanMode == "slow" ? 2.2 : customVolumeRatio

// ===== CORE BREAKOUT LOGIC =====
// Calculate price metrics
priceRange = ta.highest(high, candleCount) - ta.lowest(low, candleCount)
bandWidth = (priceRange / close) * 100

// Volume analysis
avgVolume = ta.sma(volume, candleCount)
currentVolume = volume
volumeRatio = currentVolume / avgVolume
dollarVolume = currentVolume * close

// Breakout detection
maxHighExcludingCurrent = ta.highest(high[1], candleCount - 1)
currentClose = close
priceBreakout = currentClose > maxHighExcludingCurrent * (1 + breakoutThreshold)
volumeBreakout = volumeRatio > volumeThreshold
dollarVolumeCheck = dollarVolume >= minVolumeDollar

// Signal classification
confirmedBreakout = priceBreakout and volumeBreakout and dollarVolumeCheck
potentialBreakout = priceBreakout and (volumeRatio > (volumeThreshold * 0.7)) and dollarVolumeCheck

// ===== PERCENT CHANGE CALCULATION =====
startPrice = close[candleCount - 1]
endPrice = close
percentChange = ((endPrice - startPrice) / startPrice) * 100

// ===== VISUALIZATION =====
// Plot breakout signals with dynamic visual feedback
// Confirmed Breakout - Strong (percentChange > 3)
plotshape(
  series = confirmedBreakout and showSignalLabels and (percentChange > 3),
  title = "Confirmed Breakout Strong",
  location = location.belowbar,
  color = color.new(breakoutCol, 0),
  style = shape.triangleup,
  size = size.large,
  text = "üö® STRONG")

// Confirmed Breakout - Medium (1.5 < percentChange <= 3)
plotshape(
  series = confirmedBreakout and showSignalLabels and (percentChange > 1.5) and (percentChange <= 3),
  title = "Confirmed Breakout Medium",
  location = location.belowbar,
  color = color.new(breakoutCol, 30),
  style = shape.triangleup,
  size = size.normal,
  text = "üö®+")

// Confirmed Breakout - Weak (percentChange <= 1.5)
plotshape(
  series = confirmedBreakout and showSignalLabels and (percentChange <= 1.5),
  title = "Confirmed Breakout Weak",
  location = location.belowbar,
  color = breakoutCol,
  style = shape.triangleup,
  size = size.small,
  text = "üö®")

// Potential Breakout - High Volume (volumeRatio > 3)
plotshape(
  series = potentialBreakout and not confirmedBreakout and showSignalLabels and (volumeRatio > 3),
  title = "Potential Breakout High",
  location = location.belowbar,
  color = color.new(potentialCol, 0),
  style = shape.triangleup,
  size = size.large,
  text = "‚ö†Ô∏è HIGH")

// Potential Breakout - Medium Volume (2 < volumeRatio <= 3)
plotshape(
  series = potentialBreakout and not confirmedBreakout and showSignalLabels and (volumeRatio > 2) and (volumeRatio <= 3),
  title = "Potential Breakout Medium",
  location = location.belowbar,
  color = color.new(potentialCol, 0),
  style = shape.triangleup,
  size = size.normal,
  text = "‚ö†Ô∏è HIGH")

// Potential Breakout - Low Volume (volumeRatio <= 2)
plotshape(
  series = potentialBreakout and not confirmedBreakout and showSignalLabels and (volumeRatio <= 2),
  title = "Potential Breakout Low",
  location = location.belowbar,
  color = color.new(potentialCol, 40),
  style = shape.triangleup,
  size = size.small,
  text = "‚ö†Ô∏è")

// Volume histogram overlay with dynamic color and width
volumeColor = volume > avgVolume * 1.5 ? breakoutCol : volume > avgVolume ? potentialCol : color.gray
plot(
    showVolume ? volume : na,
    title = "Volume",color = color.new(volumeColor, 70 - int(math.min((volumeRatio - 1) * 15, 60))),
    style = plot.style_histogram,
    linewidth = volumeRatio > 2.5 ? 3 : volumeRatio > 1.5 ? 2 : 1
)

// Background highlighting for breakouts, more visible for strong changes
bgcolor(
  confirmedBreakout ? color.new(breakoutCol, percentChange > 3 ? 40 : 70) : na,
  title = "Breakout Background")

// ===== DATA TABLE =====
// Display key metrics with dynamic colors and backgrounds
var table infoTable = table.new(position.top_right, 3, 6, bgcolor = color.white, border_width = 1)

if barstate.islast and showSignalLabels
    table.cell(infoTable, 0, 0, "Metric", text_color = color.black, bgcolor = color.gray)
    table.cell(infoTable, 1, 0, "Value", text_color = color.black, bgcolor = color.gray)
    table.cell(infoTable, 2, 0, "Status", text_color = color.black, bgcolor = color.gray)
    
    table.cell(infoTable, 0, 1, "Œî (Change %)", text_color = color.black)
    table.cell(
      infoTable, 1, 1,
      str.tostring(percentChange, "#.##") + "%",
      text_color = percentChange > 3 ? color.green : percentChange > 0 ? color.orange : color.red,
      bgcolor = percentChange > 3 ? color.new(color.green, 70) : na
      )
    table.cell(
      infoTable, 2, 1,
      percentChange > 3 ? "Strong" : percentChange > 0 ? "Positive" : "Negative",
      text_color = percentChange > 3 ? color.green : percentChange > 0 ? color.orange : color.red
      )

    table.cell(infoTable, 0, 2, "W (Band Width)", text_color = color.black)
    table.cell(
      infoTable, 1, 2,
      str.tostring(bandWidth, "#.##") + "%",
      text_color = bandWidth > 3 ? color.blue : bandWidth > 1.5 ? color.aqua : color.gray,
      bgcolor = bandWidth > 3 ? color.new(color.blue, 70) : na
      )
    table.cell(
      infoTable, 2, 2,
      bandWidth > 3 ? "High Vol" : bandWidth > 1.5 ? "Medium" : "Low",
      text_color = bandWidth > 3 ? color.blue : bandWidth > 1.5 ? color.aqua : color.gray
      )

    table.cell(infoTable, 0, 3, "Volume Ratio", text_color = color.black)
    table.cell(
      infoTable, 1, 3,
      str.tostring(volumeRatio, "#.#") + "x",
      text_color = volumeRatio > 2.5 ? color.green : volumeRatio > 1.5 ? color.orange : color.red,
      bgcolor = volumeRatio > 2.5 ? color.new(color.green, 80) : na
      )
    table.cell(
      infoTable, 2, 3,
      volumeRatio > volumeThreshold ? "‚úî Pass" : "‚úò Fail",
      text_color = volumeRatio > volumeThreshold ? color.green : color.red
      )

    table.cell(infoTable, 0, 4, "Dollar Volume", text_color = color.black)
    table.cell(
      infoTable, 1, 4,
      str.tostring(dollarVolume / 1000, "#") + "K",
      text_color = dollarVolumeCheck ? color.purple : color.red,
      bgcolor = dollarVolumeCheck ? color.new(color.purple, 70) : na
      )
    table.cell(
      infoTable, 2, 4,
      dollarVolumeCheck ? "‚úî Pass" : "‚úò Fail",
      text_color = dollarVolumeCheck ? color.green : color.red
      )

    table.cell(infoTable, 0, 5, "Scan Mode", text_color = color.black)
    table.cell(infoTable, 1, 5, str.upper(scanMode), text_color = color.black)
    table.cell(infoTable, 2, 5, str.tostring(candleCount) + " bars", text_color = color.black)

// ===== ALERTS =====
if enableAlerts
    // Confirmed breakout alert
    if confirmedBreakout
        alert(
          "üö® CONFIRMED BREAKOUT: " + syminfo.ticker + " at $" + str.tostring(close, "#.########") + 
          " | Œî: +" + str.tostring(percentChange, "#.##") + "% | W: " + str.tostring(bandWidth, "#.##") + 
          "% | Vol: " + str.tostring(volumeRatio, "#.#") + "x | Mode: " + str.upper(scanMode), 
          alert.freq_once_per_bar
          )
    
    // Potential breakout alert
    if potentialBreakout and not confirmedBreakout
        alert(
          "‚ö†Ô∏è POTENTIAL BREAKOUT: " + syminfo.ticker + " at $" + str.tostring(close, "#.########") + 
          " | Œî: +" + str.tostring(percentChange, "#.##") + "% | W: " + str.tostring(bandWidth, "#.##") + 
          "% | Vol: " + str.tostring(volumeRatio, "#.#") + "x | Mode: " + str.upper(scanMode), 
          alert.freq_once_per_bar
          )

// ===== STRATEGY NOTES =====
// This indicator replicates the Resonance.ai breakout scanner logic:
// 1. Analyzes price breakouts above recent highs with configurable thresholds
// 2. Confirms breakouts with volume spike analysis
// 3. Filters by minimum dollar volume to ensure liquidity
// 4. Provides multiple scanning modes (fast/medium/slow) for different trading styles
// 5. Calculates key metrics: Œî (percent change) and W (band width) for volatility assessment
//
// Signal Types:
// - Confirmed Breakout (üö®): Price + Volume + Dollar Volume all pass thresholds
// - Potential Breakout (‚ö†Ô∏è): Price passes, volume partially passes thresholds
//
// Usage:
// - Fast Mode: Quick scalping opportunities (10 bars, 1.3% threshold)
// - Medium Mode: Balanced approach (15 bars, 1.8% threshold) 
// - Slow Mode: Conservative breakouts (20 bars, 2.4% threshold)
//
// The scanner works best on 1-minute timeframes for crypto pairs with high volume.
